import pandas as pd
import streamlit as st
import datetime
#import matplotlib.pyplot as plt
#import seaborn as sns
#import plotly.express as px
import ast

# --- Chargement du CSS via le fichier style.css ---
with open('style.css') as c:
    css = c.read()
st.markdown(f'<style>{css}</style>', unsafe_allow_html=True)

col1, col2, col3 = st.columns([1, 1, 1])
with col2:
    st.image("images/pickflix-hori.png", width=500)

# --- Hero Section ---
st.markdown("""
    <div class="hero">
        <div class="hero-title">üéØ <u>Conclusion</u></div>
            </div>
    </div>
""", unsafe_allow_html=True)

# ------------------------------------------------------------------------------------------------------------------------ #
#                                                       CONTENU 
# ------------------------------------------------------------------------------------------------------------------------ #

st.markdown("""
<div class="custom-paragraph">

### ü§Ø Difficult√©s rencontr√©es

La cr√©ation de notre algorithme de recommandation bas√© sur **KNN non supervis√©** nous a confront√©s √† plusieurs d√©fis techniques et m√©thodologiques :

- **Pr√©traitement des donn√©es** : il a fallu transformer certaines colonnes contenant des cha√Ænes de caract√®res (comme les genres, les acteurs, ou l'overview) en donn√©es num√©riques exploitables dans le dataset mais aussi par le mod√®le. Ce processus, notamment via l'encodage et la vectorisation, s‚Äôest av√©r√© plus complexe que pr√©vu.
- **Choix des features pertinentes** : il √©tait essentiel de bien s√©lectionner les variables qui allaient alimenter notre algorithme pour garantir des recommandations coh√©rentes. Cela a n√©cessit√© plusieurs it√©rations et tests.
- **D√©termination de la distance optimale** : nous avons d√ª exp√©rimenter avec diff√©rentes m√©triques de distance (euclidienne, cosinus‚Ä¶) afin d‚Äôobtenir des r√©sultats satisfaisants.
- **Temps de calcul** : sur de grands jeux de donn√©es, l‚Äôalgorithme KNN peut devenir lent, car il repose sur le calcul de distances entre tous les points.

---

### üöÄ Pistes d'am√©lioration

Pour aller plus loin et am√©liorer la qualit√© de notre application et la performance de notre syst√®me de recommandation, plusieurs pistes sont envisageables :

- **Ajouter la possibilit√© de cliquer** sur les affiches de films afin d'acc√©der √† leur d√©tails.
- **Int√©grer des donn√©es utilisateur** (notes, historique de visionnage, interactions) pour personnaliser davantage les recommandations.
- **Optimiser le d√©ploiement** : par exemple, en pr√©-calculant les plus proches voisins et en les stockant dans une base, afin de gagner du temps lors des appels.
- **√âvaluer la qualit√© des recommandations** avec des m√©triques pr√©cises (RMSE, pr√©cision, rappel, taux de clics) pour guider les it√©rations.
            
Il y a √©galement de nombreuses am√©liorations sur l'application en elle-m√™me que nous pourrions apporter. L'ajout d'informations via des API nous permettrait d'ajouter les photos des acteurs pr√©sents dans chaque film, avec leur r√¥le dans le film, la bande-annonce, des extraits d'articles de presse sp√©cialis√©e, la liste est longue.

---
            
### ü§ò Un grand merci √† Teddy qui nous a guid√© avec bienveillance et PATIENCE !
            
---

</div>
""", unsafe_allow_html=True)
